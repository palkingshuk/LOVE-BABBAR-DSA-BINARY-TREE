#include <iostream>
using namespace std;
 
// Data structure to store a binary tree node
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};

void inorder(Node* root)
{
    if(root == NULL)
    {
        return;
    }
    inorder(root -> left);
    cout<<root -> data << " ";
    inorder(root->right);
}
void preorder(Node* root)
{
    if(root == NULL)
    {
        return;
    }
    cout<<root -> data<<" ";
    preorder(root -> left);
    preorder(root -> right);
}
void postorder(Node* root)
{
    if(root == NULL)
        return;
    postorder(root -> left);
    postorder(root -> right);
    cout<<root->data<<" ";

}

Node* mirrorify(Node* root )
{
    if(root == NULL)
    {
        
        return NULL;
    }
    Node* mirror = new Node(root -> data);
    mirror -> right = mirrorify(root -> left);
    mirror -> left = mirrorify(root -> right);
}

int main()
{
    /* Construct the following tree
               1
             /   \
            /     \
           2       3
          /      /   \
         /      /     \
        4      5       6
              / \
             /   \
            7     8
    */
 
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
 
    inorder(root);cout<<endl;
    // preorder(root);cout<<endl;
    // postorder(root);
    Node* mirror = mirrorify(root);
    
    inorder(mirror);
 
    return 0;
}
